'''
    VirtualBox functions.
    
    Written for vboxmanage 3.2.10_OSEr66523 from Debian Squeeze.

    Copyright 2009 GoodCrypto

    This program is open source, licensed under AGPLv3, see <http://www.gnu.org/licenses/>.
'''

import sh

def make_va():
    ''' Make a virtual appliance.
    
        Written for vboxmanage 3.2.10_OSEr66523 from Debian Squeeze. 
        See 
            man vboxmanage
            http://www.virtualbox.org/manual/ch08.html
            
        vboxmanage versions vary dramatically.
        
        vboxmanage 3.2.10_OSEr66523 from Debian Squeeze has horrible arg parsing.
        So the sh calls are primitive.
    '''
    
    def vm_exists():
        try:
            sh.vboxmanage.showvminfo(Project)
            exists = True
        except:
            exists = False
        return exists
    
    def create_vm():
        def recreate_vm():
            # vboxmanage 3.2.10_OSEr66523 from Debian Squeeze is so stupid it insists on 
            # "--name Project" instead of "--name=Project"
            sh.vboxmanage.createvm('--name', Project, register=True)
            
        note('create vm...')
        try:
            recreate_vm()
        except sh.ErrorReturnCode as erc:
            match = re.search(
                "ERROR: Machine settings file '(.*?)' already exists",
                erc.stdout
                )
            if match:
                settings_file = match.group(1)
                #note('settings_file: {}'.format(settings_file)) #DEBUG
                os.remove(settings_file)
                recreate_vm()
            else:
                raise
        
    def build_vm():
        
        def attach_storage():
            sh.vboxmanage.storageattach(Project, 
                '--storagectl', 'IDE Controller', 
                '--port', '0', 
                '--device', '0', 
                '--type', 'hdd', 
                hdd_filename)
            note('attach iso...')
            sh.vboxmanage.storageattach(Project,
                '--storagectl', 'IDE Controller', 
                '--port', '0', 
                '--device', '1', 
                '--type', 'dvddrive', 
                iso_filename)
            
        def detach_storage():
            sh.vboxmanage.storageattach(Project, 
                '--storagectl', 'IDE Controller', 
                '--port', '0', 
                '--device', '0', 
                '--type', 'hdd', 
                '--medium', 'none')
            note('attach iso...')
            sh.vboxmanage.storageattach(Project,
                '--storagectl', 'IDE Controller', 
                '--port', '0', 
                '--device', '1', 
                '--type', 'dvddrive', 
                '--medium', 'none')
            
        note('build vm...')
        create_vm()
        try:
            sh.vboxmanage.modifyvm(Project, 
                '--memory', '128', 
                '--acpi', 'on', 
                '--boot1', 'dvd', 
                '--nic1', 'nat')
            note('create hd...')
            sh.vboxmanage.createhd(
                '--filename', Project+'.vdi', 
                '--size', '10000', 
                register=True)
                
            note('create storage controller...')
            sh.vboxmanage.storagectl(Project, 
                '--name', 'IDE Controller', 
                '--add', 'ide', 
                '--controller', 'PIIX4')
            note('attach hd...')
            attach_storage()
            '''
            sh.vboxmanage.storageattach(Project, 
                '--storagectl', , 
                '--port', '0', 
                '--device', '0', 
                '--type', 'hdd', 
                hdd_filename)
            note('attach iso...')
            sh.vboxmanage.storageattach(Project,
                '--storagectl', 'IDE Controller', 
                '--port', '0', 
                '--device', '1', 
                '--type', 'dvddrive', 
                iso_filename)
            '''
            note('config net...')
            sh.vboxmanage.modifyvm(Project, 
                '--nic1', 'bridged', 
                '--cableconnected1', 'on', 
                '--bridgeadapter1', 'eth0')
            
            sh.vboxmanage.export(Project,
                '--output', va_filename,
                # [--legacy09] [--vsys <number of virtual system>]
                '--product', Project, 
                #'--producturl', '<product url>', 
                '--vendor', Project, 
                '--vendorurl', 'http://' + Project.lower() + '.com', 
                # '[--version <version info>] [--eula <license text>] [--eulafile <filename>],
                )
    
        except:
            delete_vm()
            raise
    
    def start_vm():
        note('start vm...')
        sh.vboxmanage.startvm(Project)
        
    def delete_vm():
        ''' Delete the virtualbox vm.
        
            We have to delete the storage media before we can delete the vm.
            It's possible to successfully delete a storage medium, but then
            not successfully delete the vm. Then next time we call 
            delete_vm() the attempt to delete storage will fail, because it
            is already deleted. So we enclose every earlier step in 
            try/except.
        '''
        
        note('delete any existing vm...')
        # try to close and delete, but if it doesn't work move on
        try:
            sh.vboxmanage.closemedium('disk', hdd_filename, delete=True)
        except Exception as e:
            note(e)
            pass
        try:
            sh.vboxmanage.closemedium('dvd', iso_filename, delete=True)
        except Exception as e:
            note(e)
            pass
        try:
            sh.vboxmanage.unregistervm(Project, delete=True)
        except Exception as e:
            note(e)
            pass
            
        ''' !! 
            delete files listed by "vboxmanage showvminfo VMNAME"
                Config file:     /home/?/VirtualBox VMs/goodcrypto/goodcrypto.vbox
                Snapshot folder: /home/?/VirtualBox VMs/goodcrypto/Snapshots
                Log folder:      /home/?/VirtualBox VMs/goodcrypto/Logs
        '''

        
    note('make va...')
    delete_vm()
    assert not vm_exists()
    build_vm()
    #if not vm_exists():
    #    build_vm()
        
    note('vm is ready at {}'.format(va_filename))
    
    start_vm()

